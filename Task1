import tkinter as tk
from tkinter import messagebox

# Functions for basic arithmetic operations
def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    if y == 0:
        messagebox.showerror("Error", "Cannot divide by zero!")
        return None
    return x / y

# Main Calculator App Class
class CalculatorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Calculator")
        
        # Entry widget for showing calculations
        self.result_var = tk.StringVar()
        self.result_entry = tk.Entry(self.root, textvariable=self.result_var, font=("Arial", 16), bd=10, relief="sunken", justify="right")
        self.result_entry.grid(row=0, column=0, columnspan=4, sticky="nsew")
        
        # History of recent calculations (a list to store history)
        self.history = []

        # Create a Text widget for displaying the history
        self.history_text = tk.Text(self.root, height=20, width=30, font=("Arial", 12), wrap="word", bd=10, relief="sunken")
        self.history_text.grid(row=0, column=4, rowspan=5, sticky="nsew")
        self.history_text.config(state=tk.DISABLED)  # Disable editing the history text directly
        
        # Button grid for the calculator layout
        self.create_buttons()

    def create_buttons(self):
        # Define button text and position
        buttons = [
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),
            ('0', 4, 0), ('.', 4, 1), ('=', 4, 2), ('+', 4, 3)
        ]
        
        for (text, row, col) in buttons:
            button = tk.Button(self.root, text=text, font=("Arial", 16), width=5, height=2, command=lambda t=text: self.on_button_click(t))
            button.grid(row=row, column=col, sticky="nsew")

        # Clear Button
        clear_button = tk.Button(self.root, text="C", font=("Arial", 16), width=5, height=2, command=self.clear)
        clear_button.grid(row=5, column=0, columnspan=3, sticky="nsew")

        # Delete Button
        delete_button = tk.Button(self.root, text="Del", font=("Arial", 16), width=5, height=2, command=self.delete_last)
        delete_button.grid(row=5, column=3, sticky="nsew")

        # Clear History Button
        clear_history_button = tk.Button(self.root, text="Clear History", font=("Arial", 12), width=15, height=2, command=self.clear_history)
        clear_history_button.grid(row=5, column=4, columnspan=2, sticky="nsew")

        # Configure grid to be responsive
        for i in range(6):
            self.root.grid_rowconfigure(i, weight=1)
        for j in range(5):
            self.root.grid_columnconfigure(j, weight=1)

    def on_button_click(self, text):
        current = self.result_var.get()
        if text == "=":
            try:
                # Perform the calculation
                result = eval(current)
                self.result_var.set(result)
                
                # Record the recent calculation
                self.history.insert(0, f"{current} = {result}")
                if len(self.history) > 5:  # Keep last 5 calculations
                    self.history = self.history[:5]
                self.update_history_text()

            except Exception as e:
                messagebox.showerror("Error", "Invalid Calculation!")
                self.result_var.set("")
        else:
            self.result_var.set(current + text)

    def clear(self):
        """Clears the current input"""
        self.result_var.set("")

    def delete_last(self):
        """Deletes the last character in the current input"""
        current = self.result_var.get()
        self.result_var.set(current[:-1])  # Remove the last character

    def clear_history(self):
        """Clears the history section"""
        self.history = []  # Empty the history list
        self.update_history_text()

    def update_history_text(self):
        """Updates the history Text widget with the recent calculations"""
        self.history_text.config(state=tk.NORMAL)  # Enable editing to update the text widget
        self.history_text.delete(1.0, tk.END)  # Clear the current history
        for entry in self.history:
            self.history_text.insert(tk.END, entry + "\n")  # Add each calculation to the history
        self.history_text.config(state=tk.DISABLED)  # Disable editing again

# Create main window
if __name__ == "__main__":
    root = tk.Tk()
    app = CalculatorApp(root)
    root.mainloop()
